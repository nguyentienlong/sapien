# Sapien - a fast, flexible Machine Learning library.
# Copyright 2018.
#
# Author: mail2ngoclinh@gmail.com

cmake_minimum_required(VERSION 3.5 FATAL_ERROR)
cmake_policy(VERSION 3.5)

# Set the C++ version (must be >= C++11) when compiling Sapien.
#
# Reflect a user-specified (via -D) CMAKE_CXX_STANDARD if present, otherwise
# default to C++11.
set(DEFAULT_CXX_STANDARD ${CMAKE_CXX_STANDARD})
if (NOT DEFAULT_CXX_STANDARD)
  set(DEFAULT_CXX_STANDARD 11)
endif()
set(CMAKE_CXX_STANDARD ${DEFAULT_CXX_STANDARD} CACHE STRING "C++ standard
  (minimum 11)" FORCE)
# Restrict CMAKE_CXX_STANDARD to the valid versions permitted and ensure that
# if one was forced via -D that it is in the valid set.
set(ALLOWED_CXX_STANDARDS 11 14 17)
set_property(CACHE CMAKE_CXX_STANDARD PROPERTY STRINGS ${ALLOWED_CXX_STANDARDS})
list(FIND ALLOWED_CXX_STANDARDS ${CMAKE_CXX_STANDARD} POSITION)
if (POSITION LESS 0)
  message(FATAL_ERROR "Invalid CMAKE_CXX_STANDARD: ${CMAKE_CXX_STANDARD}. "
    "Must be one of: ${ALLOWED_CXX_STANDARDS}")
endif()
# Specify the standard as a hard requirement, otherwise CMAKE_CXX_STANDARD is
# interpreted as a suggestion that can decay *back* to lower versions.
set(CMAKE_CXX_STANDARD_REQUIRED ON CACHE BOOL "")
mark_as_advanced(CMAKE_CXX_STANDARD_REQUIRED)

# MSVC versions < 2013 did not fully support >= C++11.
if (MSVC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 12.0)
  message(FATAL_ERROR "Invalid CMAKE_CXX_COMPILER_VERSION: "
    "${CMAKE_CXX_COMPILER_VERSION}. Ceres requires at least MSVC 2013 Update 4+")
endif()

project(Sapien C CXX)

# NOTE: The 'generic' CMake variables CMAKE_[SOURCE/BINARY]_DIR should not be
#       used. Always use the projct-specific variannts (generated by CMake):
#       <PROJECT_NAME_MATCHING_CASE>_[SOURCE/BINARY]_DIR, e.g.
#       Sapien_SOURCE_DIR

# Make CMake aware of the cmake folder for local FindXX scripts, append rather
# than set in case the use has passed their own additional paths via -D.
list(APPEND CMAKE_MODULE_PATH "${Sapien_SOURCE_DIR}/cmake")
include(UpdateCacheVariable)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${Sapien_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${Sapien_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${Sapien_BINARY_DIR}/lib)

# Allow user to specify a suffix for the library install directory, the only
# really sensible option (other than "") being "64", such that:
# ${CMAKE_INSTALL_PREFIX}/lib -> ${CMAKE_INSTALL_PREFIX}/lib64.
#
# Heuristic for determining LIB_SUFFIX. FHS recommends that 64-bit systems
# install native libraries to lib64 rather than lib. Most distros seem to
# follow this convention with a couple notable exceptions (Debian-based and
# Arch-based distros) which we try to detect here.
if (CMAKE_SYSTEM_NAME MATCHES "Linux" AND
    NOT DEFINED LIB_SUFFIX AND
    NOT CMAKE_CROSSCOMPILING AND
    CMAKE_SIZEOF_VOID_P EQUAL "8" AND
    NOT EXISTS "/etc/debian_version" AND
    NOT EXISTS "/etc/arch-release")
  message("-- Detected non-Debian/Arch-based 64-bit Linux distribution. "
    "Defaulting to library install directory: lib${LIB_SUFFIX}. You can "
    "override this by specifying LIB_SUFFIX.")
  set(LIB_SUFFIX "64")
endif ()
# Only create the cache variable (for the CMake GUI) after attempting to detect
# the suffix *if not specified by the user* (NOT DEFINED LIB_SUFFIX in if())
# s/t the user could override our autodetected suffix with "" if desired.
set(LIB_SUFFIX "${LIB_SUFFIX}" CACHE STRING
  "Suffix of library install directory (to support lib/lib64)." FORCE)

set(CMAKE_RELEASE_POSTFIX "")
set(CMAKE_DEBUG_POSTFIX "-debug")

# Read the Sapien version from the source.
# The version file is stored in <Sapien_SOURCE_DIR>/include/sapien/version.h
include(ReadSapienVersionFromSource)
read_sapien_version_from_source(${Sapien_SOURCE_DIR})

enable_testing()

# General build options
option(BUILD_TESTING "Enable tests." ON)
option(BUILD_EXAMPLES "Build examples." ON)
option(BUILD_SHARED_LIBS "Build Sapien as a shared library." ON)

# BLAS options.
# TODO(Linh): Add MKL option.
# If Sapien is built for OSX and user doesn't specify a BLAS library
# via -DBLAS=[atlas|openblas], then the BLAS come with the Acclerate
# framework will be used.
set(BLAS "" CACHE STRING "Selected BLAS library")
set_property(CACHE BLAS PROPERTY STRINGS "Atlas;OpenBLAS")

unset(SAPIEN_COMPILE_OPTIONS)

# Glog.
find_package(Glog REQUIRED)

# BLAS.
unset(BLAS_INCLUDE_DIRS)
unset(BLAS_LIBRARIES)

if (BLAS STREQUAL "Atlas" OR BLAS STREQUAL "atlas")
  find_package(Atlas REQUIRED)
  if (Atlas_FOUND)
    message("-- Building Sapien with Atlas.")
  endif()
  set(BLAS_INCLUDE_DIRS ${Atlas_INCLUDE_DIR})
  set(BLAS_LIBRARIES ${Atlas_LIBRARIES})
elseif (BLAS STREQUAL "OpenBLAS" OR BLAS STREQUAL "openblas")
  find_package(OpenBLAS REQUIRED)
  if (OpenBLAS_FOUND)
    message("-- Building Sapien with OpenBLAS.")
  endif()
  set(BLAS_INCLUDE_DIRS ${OpenBLAS_INCLUDE_DIR})
  set(BLAS_LIBRARIES ${OpenBLAS_LIB})
elseif(APPLE)
  find_package(vecLib REQUIRED)
  set(BLAS_INCLUDE_DIRS ${vecLib_INCLUDE_DIR})
  set(BLAS_LIBRARIES ${vecLib_LINKER_LIBS})
  if (VECLIB_FOUND)
    if(NOT vecLib_INCLUDE_DIR MATCHES "^/System/Library/Frameworks/vecLib.framework.*")
      list(APPEND SAPIEN_COMPILE_OPTIONS SAPIEN_USE_ACCELERATE)
      message("-- Building Sapien with Apple Accelerate framework.")
    endif()
  endif()
else()
  message(FATAL_ERROR "Unkown BLAS library.")
endif()

message("-- BLAS_INCLUDE_DIRS: ${BLAS_INCLUDE_DIRS}")
message("-- BLAS_LIBRARIES: ${BLAS_LIBRARIES}")

if (BUILD_SHARED_LIBS)
  message("-- Building Sapien as a shared library.")
  # The SAPIEN_BUILDING_SHARED_LIBRARY compile definition is NOT stored
  # in the SAPIEN_COMPILE_OPTIONS as it must only be defined when Sapien
  # is compiled not when it is used as it controls the SAPIEN_EXPORT macro.
  add_definitions(-DSAPIEN_BUILDING_SHARED_LIBRARY)
  list(APPEND SAPIEN_COMPILE_OPTIONS SAPIEN_USING_SHARED_LIBRARY)
else()
  message("-- Building Sapien as a static library.")
endif()

if (NOT CMAKE_BUILD_TYPE)
  message("-- No build type specified; defaulting to CMAKE_BUILD_TYPE=Release.")
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose built type, options are: None Debug Release RelWithDebInfo MinSizeRel." FORCE)
else()
  message("-- CMAKE_BUILD_TYPE is set to ${CMAKE_BUILD_TYPE}")
endif()

if (UNIX)
  # GCC is not strict enough by default, so enable most of the warnings.
  set(CMAKE_CXX_FLAGS
    "${CMAKE_CXX_FLAGS} -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers")
endif (UNIX)

# Configre the Sapien config.h compile options header using the current
# compile options and put the configured header into the sapien build
# directory.
list(REMOVE_DUPLICATES SAPIEN_COMPILE_OPTIONS)
include(CreateSapienConfig)
create_sapien_config("${SAPIEN_COMPILE_OPTIONS}"
  ${Sapien_BINARY_DIR}/config/sapien/internal)

add_subdirectory(internal/sapien)
  
if (BUILD_EXAMPLES)
  message("-- Build the examples")
  add_subdirectory(examples)
else (BUILD_EXAMPLES)
  message("-- Do not build any example.")
endif (BUILD_EXAMPLES)

# Install root public headers.
file(GLOB SAPIEN_HDRS ${Sapien_SOURCE_DIR}/include/sapien/*.h)
install(FILES ${SAPIEN_HDRS} DESTINATION include/sapien)

# Helper macro for installing public headers that reside inside a
# subfolder.
macro(sapien_install_public_headers HDRS_DIR)
  # HDRS_DIR is expected to be in Sapien_SOURCE_DIR/include/sapien
  set(HEADERS_DIR ${Sapien_SOURCE_DIR}/include/sapien/${HDRS_DIR})
  if (NOT EXISTS "${HEADERS_DIR}")
    message(FATAL_ERROR "Sapien bug: Specified HEADERS_DIR :"
      "${HEADERS_DIR} does not exist.")
  elseif (EXISTS "${HEADERS_DIR}" AND NOT IS_DIRECTORY "${HEADERS_DIR}")
    message(FATAL_ERROR "Sapien bug: Specified HEADERS_DIR: "
      "${HEADERS_DIR} exists, but is not a directory.")
  else()
    file(GLOB HEADER_FILES ${HEADERS_DIR}/*.h)
    install(FILES ${HEADER_FILES} DESTINATION include/sapien/${HDRS_DIR})
  endif()
endmacro()

# Install subfolder public headers.
sapien_install_public_headers(internal)
sapien_install_public_headers(internal/type_traits)
sapien_install_public_headers(sgd)
sapien_install_public_headers(solver)

# Also setup installation of Sapien config.h configured with the current
# build options into the installed headers directory.
install(FILES ${Sapien_BINARY_DIR}/config/sapien/internal/config.h
        DESTINATION include/sapien/internal)

